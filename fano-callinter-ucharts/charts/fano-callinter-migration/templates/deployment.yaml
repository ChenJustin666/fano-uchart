{{- $fullName := include "fanolabs.name" . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fanolabs.name" . }}
  labels:
{{ include "fanolabs.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "fanolabs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        #rollme: {{ randAlphaNum 8 | quote }}
      {{- if .Values.metrics.enabled }}
      {{- with .Values.metrics.podAnnotations }}
         {{- toYaml . | nindent 8 }}
      {{- end }}
        {{- end}}
      labels:
        {{- include "fanolabs.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "fanolabs.serviceAccountName" . }}
      {{- if .Values.global.hostAliases.enabled }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.global.hostAliases.values "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- include "common.imagePullSecrets" . | nindent 6 }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: fano
          emptyDir: {}
      {{- range .Values.configmapReload.extraConfigmapMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMap }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-crud
          image: {{ include "common.images.image" (dict "imageRoot" .Values.crud.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
        {{- if .Values.crud.command }}
          command:
            {{- range .Values.crud.command }}
            - {{ . | quote }}
            {{- end }}
        {{- end }}
        {{- if .Values.crud.commandArgs }}
          args:
          {{- range .Values.crud.commandArgs }}
            - {{ . | quote }}
          {{- end }}
        {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
{{- range $key, $value := .Values.crud.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
{{- end }}
{{- range $key, $value := .Values.crud.envSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "fano-common-secret"
                  key: {{ $value }}
{{- end }}
          resources:
            {{- toYaml .Values.crud.resources | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.crud.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.crud.readinessProbe | nindent 12 }}
          lifecycle:
            {{- toYaml .Values.crud.lifecycle | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: fano
              mountPath: /fano
        - name: {{ .Chart.Name }}-analyzeworker
          image: {{ include "common.images.image" (dict "imageRoot" .Values.analyzeworker.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
        {{- if .Values.analyzeworker.command }}
          command:
            {{- range .Values.analyzeworker.command }}
            - {{ . | quote }}
            {{- end }}
        {{- end }}
        {{- if .Values.analyzeworker.commandArgs }}
          args:
          {{- range .Values.analyzeworker.commandArgs }}
            - {{ . | quote }}
          {{- end }}
        {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
{{- range $key, $value := .Values.analyzeworker.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
{{- end }}
{{- range $key, $value := .Values.analyzeworker.envSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "fano-common-secret"
                  key: {{ $value }}
{{- end }}
          resources:
            {{- toYaml .Values.analyzeworker.resources | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.analyzeworker.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.analyzeworker.readinessProbe | nindent 12 }}
          lifecycle:
            {{- toYaml .Values.analyzeworker.lifecycle | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: fano
              mountPath: /fano
        - name: {{ .Chart.Name }}-speechadapter
          image: {{ include "common.images.image" (dict "imageRoot" .Values.speechadapter.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
        {{- if .Values.speechadapter.command }}
          command:
            {{- range .Values.speechadapter.command }}
            - {{ . | quote }}
            {{- end }}
        {{- end }}
        {{- if .Values.speechadapter.commandArgs }}
          args:
          {{- range .Values.speechadapter.commandArgs }}
            - {{ . | quote }}
          {{- end }}
        {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
{{- range $key, $value := .Values.speechadapter.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
{{- end }}
{{- range $key, $value := .Values.speechadapter.envSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "fano-common-secret"
                  key: {{ $value }}
{{- end }}
          resources:
            {{- toYaml .Values.speechadapter.resources | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.speechadapter.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.speechadapter.readinessProbe | nindent 12 }}
          lifecycle:
            {{- toYaml .Values.speechadapter.lifecycle | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: fano
              mountPath: /fano
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values "global" .Values.global ) | nindent 10 }}
      {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
