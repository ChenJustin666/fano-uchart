{{- $fullName := include "fanolabs.name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fanolabs.name" . }}
  labels:
    {{- include "fanolabs.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "fanolabs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fanolabs.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.global.hostAliases.enabled }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.global.hostAliases.values "context" $) | nindent 8 }}
      {{- end }}
      {{- include "common.imagePullSecrets" . | nindent 6 }}
      volumes:
      - name: fano
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: files
        {{- if .Values.localVolume.enabled }}
        hostPath:
          path: {{ .Values.localVolume.hostPath }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      serviceAccountName: {{ include "fanolabs.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-keycloak
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          image: {{ include "common.images.image" (dict "imageRoot" .Values.initData.shellImage "global" .Values.global) }}
          imagePullPolicy: "{{ .Values.initData.image.pullPolicy }}"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
          args:
            - "-c"
            - "until wget fano-portal-keycloak:8080/iam/health/live -O /dev/null; do echo waiting for fano-portal-keycloak; sleep 2; done;"
        - name: fano-{{ .Chart.Name | regexFind "[^-]+$" }}-init-data
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          image: {{ include "common.images.image" (dict "imageRoot" .Values.initData.image "global" .Values.global) }}
          imagePullPolicy: "{{ .Values.initData.image.pullPolicy }}"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - /bin/sh
          args:
            - "-c"
            - "/app/script_run.sh"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: fano
              mountPath: /fano
          env:
          {{- range $key, $value := .Values.initData.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          {{- range $key, $value := .Values.initData.envSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "fano-common-secret"
                  key: {{ $value }}
          {{- end }}
      containers:
        - name: {{ .Chart.Name }}-job
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          image: {{ template "fano-common.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
        {{- if .Values.commandjob }}
          command:
            {{- range .Values.commandjob }}
            - {{ . | quote }}
            {{- end }}
        {{- end }}
        {{- if .Values.commandArgsjob }}
          args:
          {{- range .Values.commandArgsjob }}
            - {{ . | quote }}
          {{- end }}
        {{- end }}
          env:
        {{- range $key, $value := .Values.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
        {{- end }}
        {{- range $key, $value := .Values.envSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "fano-common-secret"
                  key: {{ $value }}
        {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: fano
              mountPath: /fano
            - name: log
              mountPath: /var/log
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          lifecycle:
            {{- toYaml .Values.lifecycle | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values "global" .Values.global ) | nindent 10 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
